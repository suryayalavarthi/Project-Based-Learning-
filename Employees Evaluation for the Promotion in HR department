import numpy as np
import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt
import warnings 

df=pd.read_csv("employee_promotion.csv")
df

df.info()

df.shape

df.columns

df.describe() 

# Checking For Null values
np.sum(df.isnull().any(axis=1))

df.isnull().sum()

df.dropna(axis=0, inplace=False)
df.reset_index(drop=False, inplace=False)
df

df.drop(columns=['employee_id'], inplace=True)
df

df['previous_year_rating'].fillna(df['previous_year_rating'].mean(),inplace=True)

df['avg_training_score'].fillna(df['avg_training_score'].mean(),inplace=True)

print(df['education'].mode())

print(df['education'].mode()[0])

sns.countplot('is_promoted',data = df)

df['is_promoted'].value_counts()

df = df.drop(columns='employee_id',axis = 1)

df.head()

df['department'].value_counts()

plt.figure(figsize=(10,6))
df['department'].value_counts().plot(kind='bar').legend()
plt.show()

  plt.figure(figsize=(10,6))
sns.countplot(data=df,x='region')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(7,5))
sns.countplot('education', data=df)

plt.figure(figsize=(6,5))
sns.countplot('gender', data=df)

df['recruitment_channel'].value_counts().plot(kind='barh',color='green')

plt.figure(figsize=(10,10))
sns.countplot(df.age)
plt.show()

df['previous_year_rating'].value_counts().plot(kind='bar',color='purple')
plt.xticks(rotation=0)
plt.show()

sns.countplot(df.no_of_trainings)
plt.show()

plt.figure(figsize=(10,10))
sns.countplot(df.length_of_service)
plt.show()

plt.figure(figsize=(12,7))
sns.countplot(df.avg_training_score)
plt.xticks(rotation=90)
plt.show()

sns.countplot('is_promoted',data = df)

df.head()

sns.countplot('education',hue='is_promoted',data=df)

sns.countplot('gender',hue='is_promoted',data=df)

sns.countplot('awards_won',hue='is_promoted',data=df)

le = LabelEncoder()

df['department'] = le.fit_transform(df['department'])
df['gender'] = le.fit_transform(df['gender'])
df['education'] = le.fit_transform(df['education'].astype(str))
df['recruitment_channel'] = le.fit_transform(df['recruitment_channel'])
df['region']=le.fit_transform(df['region'])

df.head()

cols = [ 'previous_year_rating', 'avg_training_score']
for col in cols:
   df[col] = df[col].apply(lambda x: int(x) if x == x else 0)
   
dc = df.corr()
dc

df.columns

X = df[['department', 'region', 'education', 'gender', 'recruitment_channel',
       'no_of_trainings', 'age', 'previous_year_rating', 'length_of_service',
       'awards_won', 'avg_training_score']]
Y = df[['is_promoted']]

print(X)

print(Y)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.3)

print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

model = LogisticRegression(solver='liblinear')

model.fit(X_train,Y_train)

pred = model.predict(X_train)

training_data_accuracy=accuracy_score(pred,Y_train)

print('Accuracy Score od Training Data: ',training_data_accuracy)

pred1 = model.predict(X_test)

test_data_accuracy=accuracy_score(pred1,Y_test)

print('Accuracy Score on Test Data: ',test_data_accuracy)

